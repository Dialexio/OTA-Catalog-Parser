<?xml version="1.0"?>
<doc>
    <assembly>
        <name>plist-cil</name>
    </assembly>
    <members>
        <member name="T:Claunia.PropertyList.NSObject">
            <summary>
                <para>
            Abstract interface for any object contained in a property list.
            </para>
                <para>
            The names and functions of the various objects orient themselves
            towards Apple's Cocoa API.
            </para>
            </summary>
            @author Daniel Dreibrodt
            @author Natalia Portillo</member>
        <member name="F:Claunia.PropertyList.NSObject.NEWLINE">
            <summary>
            The newline character used for generating the XML output.
            This constant will be different depending on the operating system on
            which you use this library.
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.NSObject.INDENT">
            <summary>
            The identation character used for generating the XML output. This is the
            tabulator character.
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.NSObject.ASCII_LINE_LENGTH">
            <summary>
            The maximum length of the text lines to be used when generating
            ASCII property lists. But this number is only a guideline it is not
            guaranteed that it will not be overstepped.
            </summary>
        </member>
        <member name="M:Claunia.PropertyList.NSObject.ToXml(System.Text.StringBuilder,System.Int32)">
            <summary>
            Generates the XML representation of the object (without XML headers or enclosing plist-tags).
            </summary>
            <param name="xml">The StringBuilder onto which the XML representation is appended.</param>
            <param name="level">The indentation level of the object.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSObject.AssignIDs(Claunia.PropertyList.BinaryPropertyListWriter)">
            <summary>
            Assigns IDs to all the objects in this NSObject subtree.
            </summary>
            <param name="outPlist">The writer object that handles the binary serialization.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSObject.ToBinary(Claunia.PropertyList.BinaryPropertyListWriter)">
            <summary>
            Generates the binary representation of the object.
            </summary>
            <param name="outPlist">The output stream to serialize the object to.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSObject.ToXmlPropertyList">
            <summary>
            Generates a valid XML property list including headers using this object as root.
            </summary>
            <returns>The XML representation of the property list including XML header and doctype information.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSObject.ToASCII(System.Text.StringBuilder,System.Int32)">
            <summary>
            Generates the ASCII representation of this object.
            The generated ASCII representation does not end with a newline.
            Complies with https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/PropertyLists/OldStylePlists/OldStylePLists.html
            </summary>
            <param name="ascii">The StringBuilder onto which the ASCII representation is appended.</param>
            <param name="level">The indentation level of the object.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSObject.ToASCIIGnuStep(System.Text.StringBuilder,System.Int32)">
            <summary>
            Generates the ASCII representation of this object in the GnuStep format.
            The generated ASCII representation does not end with a newline.
            </summary>
            <param name="ascii">The StringBuilder onto which the ASCII representation is appended.</param>
            <param name="level">The indentation level of the object.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSObject.Indent(System.Text.StringBuilder,System.Int32)">
            <summary>
            Helper method that adds correct identation to the xml output.
            Calling this method will add <c>level</c> number of tab characters
            to the <c>xml</c> string.
            </summary>
            <param name="xml">The string builder for the XML document.</param>
            <param name="level">The level of identation.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSObject.Wrap(System.Int64)">
            <summary>
            Wraps the given value inside a NSObject.
            </summary>
            <param name="value">The value to represent as a NSObject.</param>
            <returns>A NSObject representing the given value.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSObject.Wrap(System.Double)">
            <summary>
            Wraps the given value inside a NSObject.
            </summary>
            <param name="value">The value to represent as a NSObject.</param>
            <returns>A NSObject representing the given value.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSObject.Wrap(System.Boolean)">
            <summary>
            Wraps the given value inside a NSObject.
            </summary>
            <param name="value">The value to represent as a NSObject.</param>
            <returns>A NSObject representing the given value.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSObject.Wrap(System.Byte[])">
            <summary>
            Wraps the given value inside a NSObject.
            </summary>
            <param name="value">The value to represent as a NSObject.</param>
            <returns>A NSObject representing the given value.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSObject.Wrap(System.Object[])">
            <summary>
            Creates a NSArray with the contents of the given array.
            </summary>
            <param name="value">The value to represent as a NSObject.</param>
            <returns>A NSObject representing the given value.</returns>
            <exception cref="T:System.SystemException">When one of the objects contained in the array cannot be represented by a NSObject.</exception>
        </member>
        <member name="M:Claunia.PropertyList.NSObject.Wrap(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates a NSDictionary with the contents of the given map.
            </summary>
            <param name="value">The value to represent as a NSObject.</param>
            <returns>A NSObject representing the given value.</returns>
            <exception cref="T:System.SystemException">When one of the values contained in the map cannot be represented by a NSObject.</exception>
        </member>
        <member name="M:Claunia.PropertyList.NSObject.Wrap(System.Collections.Generic.List{System.Object})">
            <summary>
            Creates a NSSet with the contents of this set.
            </summary>
            <param name="value">The value to represent as a NSObject.</param>
            <returns>A NSObject representing the given value.</returns>
            <exception cref="T:System.SystemException">When one of the values contained in the map cannot be represented by a NSObject.</exception>
        </member>
        <member name="M:Claunia.PropertyList.NSObject.Wrap(System.Object)">
            <summary>
                <para>
            Creates a NSObject representing the given .NET Object.
            </para>
                <para>
            Numerics of type <see cref="T:System.Boolean" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Int16" />, <see cref="T:System.Byte" />, <see cref="T:System.Single" /> or <see cref="T:System.Double" /> are wrapped as NSNumber objects.
            </para>
                <para>
            Strings are wrapped as <see cref="T:Claunia.PropertyList.NSString" /> objects and byte arrays as <see cref="T:Claunia.PropertyList.NSData" /> objects.
            </para>
                <para>
            DateTime objects are wrapped as <see cref="T:Claunia.PropertyList.NSDate" /> objects.
            </para>
                <para>
            Serializable classes are serialized and their data is stored in <see cref="T:Claunia.PropertyList.NSData" /> objects.
            </para>
                <para>
            Arrays and Collection objects are converted to <see cref="T:Claunia.PropertyList.NSArray" /> where each array member is wrapped into a <see cref="T:Claunia.PropertyList.NSObject" />.
            </para>
                <para>
            Dictionaries are converted to <see cref="T:Claunia.PropertyList.NSDictionary" />. Each key is converted to a string and each value wrapped into a <see cref="T:Claunia.PropertyList.NSObject" />.
            </para>
            </summary>
            <param name="o">The object to represent.</param>
            <returns>A NSObject equivalent to the given object.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSObject.WrapSerialized(System.Object)">
            <summary>
            Serializes the given object using Java's default object serialization
            and wraps the serialized object in a NSData object.
            </summary>
            <param name="o">The object to serialize and wrap.</param>
            <returns>A NSData object</returns>
            <exception cref="T:System.SystemException">When the object could not be serialized.</exception>
        </member>
        <member name="M:Claunia.PropertyList.NSObject.ToObject">
            <summary>
            Converts this NSObject into an equivalent object
            of the .NET Runtime Environment.
            <para><see cref="T:Claunia.PropertyList.NSArray" /> objects are converted to arrays.</para><para><see cref="T:Claunia.PropertyList.NSDictionary" /> objects are converted to objects extending the <see cref="T:System.Collections.Generic.Dictionary`2" /> class.</para><para><see cref="T:Claunia.PropertyList.NSSet" /> objects are converted to objects extending the <see cref="T:System.Collections.Generic.List`1" /> class.</para><para><see cref="T:Claunia.PropertyList.NSNumber" /> objects are converted to primitive number values (<see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Double" /> or <see cref="T:System.Boolean" />).</para><para><see cref="T:Claunia.PropertyList.NSString" /> objects are converted to <see cref="T:System.String" /> objects.</para><para><see cref="T:Claunia.PropertyList.NSData" /> objects are converted to <see cref="T:System.Byte" /> arrays.</para><para><see cref="T:Claunia.PropertyList.NSDate" /> objects are converted to <see cref="T:System.DateTime" /> objects.</para><para><see cref="T:Claunia.PropertyList.UID" /> objects are converted to <see cref="T:System.Byte" /> arrays.</para></summary>
            <returns>A native .NET object representing this NSObject's value.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSObject.Equals(Claunia.PropertyList.NSObject)">
            <summary>
            Determines if the specific NSObject is the same as the NSObject overriding this method.
            </summary>
            <param name="obj">The <see cref="T:Claunia.PropertyList.NSObject" /> to compare with the current <see cref="T:Claunia.PropertyList.NSObject" />.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:Claunia.PropertyList.NSObject" /> is equal to the current
            <see cref="T:Claunia.PropertyList.NSObject" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Claunia.PropertyList.NSNumber">
            <summary>
            A number whose value is either an integer, a real number or bool.
            </summary>
            @author Daniel Dreibrodt
            @author Natalia Portillo</member>
        <member name="F:Claunia.PropertyList.NSNumber.INTEGER">
            <summary>
            Indicates that the number's value is an integer.
            The number is stored as a .NET <see cref="T:System.Int64" />.
            Its original value could have been char, short, int, long or even long long.
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.NSNumber.REAL">
            <summary>
            Indicates that the number's value is a real number.
            The number is stored as a .NET <see cref="T:System.Double" />.
            Its original value could have been float or double.
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.NSNumber.BOOLEAN">
            <summary>
            Indicates that the number's value is bool.
            </summary>
        </member>
        <member name="M:Claunia.PropertyList.NSNumber.#ctor(System.Byte[],System.Int32)">
            <summary>
            Parses integers and real numbers from their binary representation.
            <i>Note: real numbers are not yet supported.</i></summary>
            <param name="bytes">The binary representation</param>
            <param name="type">The type of number</param>
            <seealso cref="F:Claunia.PropertyList.NSNumber.INTEGER" />
            <seealso cref="F:Claunia.PropertyList.NSNumber.REAL" />
        </member>
        <member name="M:Claunia.PropertyList.NSNumber.#ctor(System.String)">
            <summary>
            Creates a number from its textual representation.
            </summary>
            <param name="text">The textual representation of the number.</param>
            <seealso cref="M:System.Boolean.Parse(System.String)" />
            <seealso cref="M:System.Int64.Parse(System.String)" />
            <seealso cref="M:System.Double.Parse(System.String,System.IFormatProvider)" />
        </member>
        <member name="M:Claunia.PropertyList.NSNumber.#ctor(System.Int32)">
            <summary>
            Creates an integer number.
            </summary>
            <param name="i">The integer value.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSNumber.#ctor(System.Int64)">
            <summary>
            Creates an integer number.
            </summary>
            <param name="l">The long integer value.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSNumber.#ctor(System.Double)">
            <summary>
            Creates a real number.
            </summary>
            <param name="d">The real value.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSNumber.#ctor(System.Boolean)">
            <summary>
            Creates a bool number.
            </summary>
            <param name="b">The bool value.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSNumber.GetNSNumberType">
            <summary>
            Gets the type of this number's value.
            </summary>
            <returns>The type flag.</returns>
            <seealso cref="F:Claunia.PropertyList.NSNumber.BOOLEAN" />
            <seealso cref="F:Claunia.PropertyList.NSNumber.INTEGER" />
            <seealso cref="F:Claunia.PropertyList.NSNumber.REAL" />
        </member>
        <member name="M:Claunia.PropertyList.NSNumber.isBoolean">
            <summary>
            Checks whether the value of this NSNumber is a bool.
            </summary>
            <returns>Whether the number's value is a bool.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSNumber.isInteger">
            <summary>
            Checks whether the value of this NSNumber is an integer.
            </summary>
            <returns>Whether the number's value is an integer.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSNumber.isReal">
            <summary>
            Checks whether the value of this NSNumber is a real number.
            </summary>
            <returns>Whether the number's value is a real number.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSNumber.ToBool">
            <summary>
            The number's bool value.
            </summary>
            <returns>
                <c>true</c> if the value is true or non-zero, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSNumber.ToLong">
            <summary>
            The number's long value.
            </summary>
            <returns>The value of the number as long</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSNumber.ToInt">
            <summary>
            The number's int value.
            <i>Note: Even though the number's type might be INTEGER it can be larger than a Java int.
            Use intValue() only if you are certain that it contains a number from the int range.
            Otherwise the value might be innaccurate.</i></summary>
            <returns>The value of the number as int.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSNumber.ToDouble">
            <summary>
            The number's double value.
            </summary>
            <returns>The value of the number as double.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSNumber.floatValue">
            <summary>
            The number's float value.
            WARNING: Possible loss of precision if the value is outside the float range.
            </summary>
            <returns>The value of the number as float.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSNumber.Equals(System.Object)">
            <summary>
            Checks whether the other object is a NSNumber of the same value.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>Whether the objects are equal in terms of numeric value and type.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSNumber.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Claunia.PropertyList.NSNumber" /> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a
            hash table.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSNumber.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:Claunia.PropertyList.NSNumber" />.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:Claunia.PropertyList.NSNumber" />.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSNumber.CompareTo(System.Object)">
            <summary>
            Compares the current <see cref="T:Claunia.PropertyList.NSNumber" /> to the specified object.
            </summary>
            <returns>0 if the numbers are equal, 1 if the current <see cref="T:Claunia.PropertyList.NSNumber" /> is greater
            than the argument and -1 if it is less, or the argument is not a number.</returns>
            <param name="o">Object to compare to the current <see cref="T:Claunia.PropertyList.NSNumber" />.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSNumber.IsNumber(System.Object)">
            <summary>
            Determines if an object is a number.
            Substitutes .NET's Number class comparison
            </summary>
            <returns>
                <c>true</c> if it is a number.</returns>
            <param name="o">Object.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSNumber.Equals(Claunia.PropertyList.NSObject)">
            <summary>
            Determines whether the specified <see cref="T:Claunia.PropertyList.NSObject" /> is equal to the current <see cref="T:Claunia.PropertyList.NSNumber" />.
            </summary>
            <param name="obj">The <see cref="T:Claunia.PropertyList.NSObject" /> to compare with the current <see cref="T:Claunia.PropertyList.NSNumber" />.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:Claunia.PropertyList.NSObject" /> is equal to the current
            <see cref="T:Claunia.PropertyList.NSNumber" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Claunia.PropertyList.NSString">
            <summary>
            A NSString contains a string.
            </summary>
            @author Daniel Dreibrodt
            @author Natalia Portillo</member>
        <member name="M:Claunia.PropertyList.NSString.#ctor(System.Byte[],System.String)">
            <summary>
            Creates a NSString from its binary representation.
            </summary>
            <param name="bytes">The binary representation.</param>
            <param name="encoding">The encoding of the binary representation, the name of a supported charset.</param>
            <exception cref="T:System.ArgumentException">The encoding charset is invalid or not supported by the underlying platform.</exception>
        </member>
        <member name="M:Claunia.PropertyList.NSString.#ctor(System.String)">
            <summary>
            Creates a NSString from a string.
            </summary>
            <param name="text">The string that will be contained in the NSString.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSString.GetContent">
            <summary>
            Gets this strings content.
            </summary>
            <returns>This NSString as .NET string object.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSString.SetContent(System.String)">
            <summary>
            Sets the contents of this string.
            </summary>
            <param name="c">The new content of this string object.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSString.Append(Claunia.PropertyList.NSString)">
            <summary>
            Appends a string to this string.
            </summary>
            <param name="s">The string to append.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSString.Append(System.String)">
            <summary>
            Appends a string to this string.
            </summary>
            <param name="s">The string to append.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSString.Prepend(System.String)">
            <summary>
            Prepends a string to this string.
            </summary>
            <param name="s">The string to prepend.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSString.Prepend(Claunia.PropertyList.NSString)">
            <summary>
            Prepends a string to this string.
            </summary>
            <param name="s">The string to prepend.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSString.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Claunia.PropertyList.NSString" />.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:Claunia.PropertyList.NSString" />.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to the current
            <see cref="T:Claunia.PropertyList.NSString" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSString.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Claunia.PropertyList.NSString" /> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a
            hash table.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSString.ToString">
            <summary>
            The textual representation of this NSString.
            </summary>
            <returns>The NSString's contents.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSString.EscapeStringForASCII(System.String)">
            <summary>
            Escapes a string for use in ASCII property lists.
            </summary>
            <returns>The unescaped string.</returns>
            <param name="s">S.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSString.CompareTo(System.Object)">
            <summary>
            Compares the current <see cref="T:Claunia.PropertyList.NSString" /> to the specified object.
            </summary>
            <returns>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</returns>
            <param name="o">Object to compare to the current <see cref="T:Claunia.PropertyList.NSString" />.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSString.Equals(Claunia.PropertyList.NSObject)">
            <summary>
            Determines whether the specified <see cref="T:Claunia.PropertyList.NSObject" /> is equal to the current <see cref="T:Claunia.PropertyList.NSString" />.
            </summary>
            <param name="obj">The <see cref="T:Claunia.PropertyList.NSObject" /> to compare with the current <see cref="T:Claunia.PropertyList.NSString" />.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:Claunia.PropertyList.NSObject" /> is equal to the current
            <see cref="T:Claunia.PropertyList.NSString" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Claunia.PropertyList.NSSet">
            <summary>
                <para>
            A set is an interface to an unordered collection of objects.
            </para>
                <para>
            This implementation uses a <see cref="T:System.Collections.Generic.List`1" />as the underlying
            data structure.
            </para>
            </summary>
            @author Daniel Dreibrodt
            @author Natalia Portillo</member>
        <member name="M:Claunia.PropertyList.NSSet.#ctor">
            <summary>
            Creates an empty unordered set.
            </summary>
        </member>
        <member name="M:Claunia.PropertyList.NSSet.#ctor(System.Boolean)">
            <summary>
            Creates an empty set.
            </summary>
            <param name="ordered">Should the set be ordered on operations?</param>
        </member>
        <member name="M:Claunia.PropertyList.NSSet.#ctor(Claunia.PropertyList.NSObject[])">
            <summary>
            Creates a set and fill it with the given objects.
            </summary>
            <param name="objects">The objects to populate the set.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSSet.#ctor(System.Boolean,Claunia.PropertyList.NSObject[])">
            <summary>
            Creates a set and fill it with the given objects.
            </summary>
            <param name="objects">The objects to populate the set.</param>
            <param name="ordered">Should the set be ordered on operations?</param>
        </member>
        <member name="M:Claunia.PropertyList.NSSet.AddObject(Claunia.PropertyList.NSObject)">
            <summary>
            Adds an object to the set.
            </summary>
            <param name="obj">The object to add.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSSet.RemoveObject(Claunia.PropertyList.NSObject)">
            <summary>
            Removes an object from the set.
            </summary>
            <param name="obj">The object to remove.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSSet.AllObjects">
            <summary>
            Returns all objects contained in the set.
            </summary>
            <returns>An array of all objects in the set.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSSet.AnyObject">
            <summary>
            Returns one of the objects in the set, or <c>null</c>
            if the set contains no objects.
            </summary>
            <returns>The first object in the set, or <c>null</c> if the set is empty.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSSet.ContainsObject(Claunia.PropertyList.NSObject)">
            <summary>
            Finds out whether a given object is contained in the set.
            </summary>
            <returns>
                <c>true</c>, when the object was found, <c>false</c> otherwise.</returns>
            <param name="obj">The object to look for.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSSet.Member(Claunia.PropertyList.NSObject)">
            <summary>
            Determines whether the set contains an object equal to a given object
            and returns that object if it is present.
            </summary>
            <param name="obj">The object to look for.</param>
            <returns>The object if it is present, <c>null</c> otherwise.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSSet.IntersectsSet(Claunia.PropertyList.NSSet)">
            <summary>
            Finds out whether at least one object is present in both sets.
            </summary>
            <returns>
                <c>true</c> if the intersection of both sets is empty, <c>false</c> otherwise.</returns>
            <param name="otherSet">The other set.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSSet.IsSubsetOfSet(Claunia.PropertyList.NSSet)">
            <summary>
            Finds out if this set is a subset of the given set.
            </summary>
            <returns>
                <c>true</c> if all elements in this set are also present in the other set, <c>false</c>otherwise.</returns>
            <param name="otherSet">The other set.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSSet.GetEnumerator">
            <summary>
            Returns an enumerator object that lets you iterate over all elements of the set.
            This is the equivalent to <c>objectEnumerator</c> in the Cocoa implementation
            of NSSet.
            </summary>
            <returns>The iterator for the set.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSSet.GetSet">
            <summary>
            Gets the underlying data structure in which this NSSets stores its content.
            </summary>
            <returns>A Set object.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSSet.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Claunia.PropertyList.NSSet" /> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a
            hash table.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSSet.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Claunia.PropertyList.NSSet" />.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:Claunia.PropertyList.NSSet" />.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to the current
            <see cref="T:Claunia.PropertyList.NSSet" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Claunia.PropertyList.NSSet.Count">
            <summary>
            Gets the number of elements in the set.
            </summary>
            <value>The number of elements in the set.</value>
        </member>
        <member name="M:Claunia.PropertyList.NSSet.ToXml(System.Text.StringBuilder,System.Int32)">
            <summary>
            Returns the XML representantion for this set.
            There is no official XML representation specified for sets.
            In this implementation it is represented by an array.
            </summary>
            <param name="xml">The XML StringBuilder</param>
            <param name="level">The indentation level</param>
        </member>
        <member name="M:Claunia.PropertyList.NSSet.ToASCII(System.Text.StringBuilder,System.Int32)">
            <summary>
            Returns the ASCII representation of this set.
            There is no official ASCII representation for sets.
            In this implementation sets are represented as arrays.
            </summary>
            <param name="ascii">The ASCII file string builder</param>
            <param name="level">The indentation level</param>
        </member>
        <member name="M:Claunia.PropertyList.NSSet.ToASCIIGnuStep(System.Text.StringBuilder,System.Int32)">
            <summary>
            Returns the ASCII representation of this set according to the GnuStep format.
            There is no official ASCII representation for sets.
            In this implementation sets are represented as arrays.
            </summary>
            <param name="ascii">The ASCII file string builder</param>
            <param name="level">The indentation level</param>
        </member>
        <member name="M:Claunia.PropertyList.NSSet.Equals(Claunia.PropertyList.NSObject)">
            <summary>
            Determines whether the specified <see cref="T:Claunia.PropertyList.NSObject" /> is equal to the current <see cref="T:Claunia.PropertyList.NSSet" />.
            </summary>
            <param name="obj">The <see cref="T:Claunia.PropertyList.NSObject" /> to compare with the current <see cref="T:Claunia.PropertyList.NSSet" />.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:Claunia.PropertyList.NSObject" /> is equal to the current
            <see cref="T:Claunia.PropertyList.NSSet" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Claunia.PropertyList.UID">
            <summary>
            An UID. Only found in binary property lists that are keyed archives.
            </summary>
            @author Daniel Dreibrodt
            @author Natalia Portillo</member>
        <member name="M:Claunia.PropertyList.UID.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Claunia.PropertyList.UID" /> class.
            </summary>
            <param name="name">Name.</param>
            <param name="bytes">Bytes.</param>
        </member>
        <member name="P:Claunia.PropertyList.UID.Bytes">
            <summary>
            Gets the bytes.
            </summary>
            <value>The bytes.</value>
        </member>
        <member name="P:Claunia.PropertyList.UID.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Claunia.PropertyList.UID.ToXml(System.Text.StringBuilder,System.Int32)">
            <summary>
            There is no XML representation specified for UIDs.
            In this implementation UIDs are represented as strings in the XML output.
            </summary>
            <param name="xml">The xml StringBuilder</param>
            <param name="level">The indentation level</param>
        </member>
        <member name="M:Claunia.PropertyList.UID.Equals(Claunia.PropertyList.NSObject)">
            <summary>
            Determines whether the specified <see cref="T:Claunia.PropertyList.NSObject" /> is equal to the current <see cref="T:Claunia.PropertyList.UID" />.
            </summary>
            <param name="obj">The <see cref="T:Claunia.PropertyList.NSObject" /> to compare with the current <see cref="T:Claunia.PropertyList.UID" />.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:Claunia.PropertyList.NSObject" /> is equal to the current
            <see cref="T:Claunia.PropertyList.UID" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Claunia.PropertyList.NSDate">
            <summary>
            Represents a date
            </summary>
            @author Daniel Dreibrodt
            @author Natalia Portillo</member>
        <member name="M:Claunia.PropertyList.NSDate.ParseDateString(System.String)">
            <summary>
            Parses the XML date string and creates a .NET DateTime object from it.
            </summary>
            <returns>The parsed Date</returns>
            <param name="textRepresentation">The date string as found in the XML property list</param>
            <exception cref="T:System.FormatException">Given string cannot be parsed</exception>
        </member>
        <member name="M:Claunia.PropertyList.NSDate.MakeDateString(System.DateTime)">
            <summary>
            Generates a String representation of a .NET DateTime object. The string
            is formatted according to the specification for XML property list dates.
            </summary>
            <param name="date">The date which should be represented.</param>
            <returns>The string representation of the date.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSDate.MakeDateStringGnuStep(System.DateTime)">
            <summary>
            Generates a String representation of a .NET DateTime object. The string
            is formatted according to the specification for GnuStep ASCII property
            list dates.
            </summary>
            <param name="date">The date which should be represented.</param>
            <returns>The string representation of the date.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSDate.#ctor(System.Byte[])">
            <summary>
            Creates a date from its binary representation.
            </summary>
            <param name="bytes">bytes The date bytes</param>
        </member>
        <member name="M:Claunia.PropertyList.NSDate.#ctor(System.String)">
            <summary>
            Parses a date from its textual representation.
            That representation has the following pattern: <code>yyyy-MM-dd'T'HH:mm:ss'Z'</code></summary>
            <param name="textRepresentation">The textual representation of the date (ISO 8601 format)</param>
            <exception cref="T:System.FormatException">When the date could not be parsed, i.e. it does not match the expected pattern.</exception>
        </member>
        <member name="M:Claunia.PropertyList.NSDate.#ctor(System.DateTime)">
            <summary>
            Creates a NSDate from a .NET DateTime
            </summary>
            <param name="d">The date</param>
        </member>
        <member name="P:Claunia.PropertyList.NSDate.Date">
            <summary>
            Gets the date.
            </summary>
            <returns>The date.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSDate.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Claunia.PropertyList.NSDate" />.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:Claunia.PropertyList.NSDate" />.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to the current
            <see cref="T:Claunia.PropertyList.NSDate" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSDate.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Claunia.PropertyList.NSDate" /> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a
            hash table.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSDate.ToString">
            <summary>
            Generates a string representation of the date.
            </summary>
            <returns>A string representation of the date.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSDate.Equals(Claunia.PropertyList.NSObject)">
            <summary>
            Determines whether the specified <see cref="T:Claunia.PropertyList.NSObject" /> is equal to the current <see cref="T:Claunia.PropertyList.NSDate" />.
            </summary>
            <param name="obj">The <see cref="T:Claunia.PropertyList.NSObject" /> to compare with the current <see cref="T:Claunia.PropertyList.NSDate" />.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:Claunia.PropertyList.NSObject" /> is equal to the current
            <see cref="T:Claunia.PropertyList.NSDate" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Claunia.PropertyList.NSArray">
            <summary>
            Represents an Array.
            </summary>
            @author Daniel Dreibrodt
            @author Natalia Portillo</member>
        <member name="M:Claunia.PropertyList.NSArray.#ctor(System.Int32)">
            <summary>
            Creates an empty array of the given length.
            </summary>
            <param name="length">The number of elements this array will be able to hold.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSArray.#ctor(Claunia.PropertyList.NSObject[])">
            <summary>
            Creates a array from an existing one
            </summary>
            <param name="a">The array which should be wrapped by the NSArray.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSArray.ObjectAtIndex(System.Int32)">
            <summary>
            Returns the object stored at the given index.
            </summary>
            <returns>The object at the given index.</returns>
            <param name="i">The index of the object.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSArray.Remove(System.Int32)">
            <summary>
            Remove the i-th element from the array.
            The array will be resized.
            </summary>
            <param name="i">The index of the object</param>
        </member>
        <member name="M:Claunia.PropertyList.NSArray.SetValue(System.Int32,System.Object)">
            <summary>
            Stores an object at the specified index.
            If there was another object stored at that index it will be replaced.
            </summary>
            <param name="key">The index where to store the object.</param>
            <param name="value">The object.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSArray.GetArray">
            <summary>
            Returns the array of NSObjects represented by this NSArray.
            Any changes to the values of this array will also affect the NSArray.
            </summary>
            <returns>The actual array represented by this NSArray.</returns>
        </member>
        <member name="P:Claunia.PropertyList.NSArray.Count">
            <summary>
            Returns the size of the array.
            </summary>
            <value>The number of elements that this array can store.</value>
        </member>
        <member name="M:Claunia.PropertyList.NSArray.ContainsObject(System.Object)">
            <summary>
            Checks whether an object is present in the array or whether it is equal
            to any of the objects in the array.
            </summary>
            <returns>
                <c>true</c>, when the object could be found. <c>false</c> otherwise.</returns>
            <param name="obj">The object to look for.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSArray.IndexOfObject(System.Object)">
            <summary>
            Searches for an object in the array. If it is found its index will be
            returned. This method also returns an index if the object is not the same
            as the one stored in the array but has equal contents.
            </summary>
            <returns>The index of the object, if it was found. -1 otherwise.</returns>
            <param name="obj">The object to look for.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSArray.IndexOfIdenticalObject(System.Object)">
            <summary>
            Searches for an object in the array. If it is found its index will be
            returned. This method only returns the index of an object that is
            <b>identical</b> to the given one. Thus objects that might contain the
            same value as the given one will not be considered.
            </summary>
            <returns>The index of the object, if it was found. -1 otherwise.</returns>
            <param name="obj">The object to look for.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSArray.LastObject">
            <summary>
            Returns the last object contained in this array.
            </summary>
            <returns>The value of the highest index in the array.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSArray.ObjectsAtIndexes(System.Int32[])">
            <summary>
            Returns a new array containing only the values stored at the given
            indices. The values are sorted by their index.
            </summary>
            <returns>The new array containing the objects stored at the given indices.</returns>
            <param name="indexes">The indices of the objects.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSArray.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Claunia.PropertyList.NSArray" />.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:Claunia.PropertyList.NSArray" />.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to the current
            <see cref="T:Claunia.PropertyList.NSArray" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSArray.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Claunia.PropertyList.NSArray" /> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a
            hash table.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSArray.ToASCIIPropertyList">
            <summary>
                <para>
            Generates a valid ASCII property list which has this NSArray as its
            root object.
            </para>
                <para>
            The generated property list complies with the format as
            described in https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/PropertyLists/OldStylePlists/OldStylePLists.html
            Property List Programming Guide - Old-Style ASCII Property Lists.
            </para>
            </summary>
            <returns>ASCII representation of this object.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSArray.ToGnuStepASCIIPropertyList">
            <summary>
                <para>
            Generates a valid ASCII property list in GnuStep format which has this
            NSArray as its root object.
            </para>
                <para>
            The generated property list complies with
            the format as described in http://www.gnustep.org/resources/documentation/Developer/Base/Reference/NSPropertyList.html
            GnuStep - NSPropertyListSerialization class documentation.
            </para>
            </summary>
            <returns>GnuStep ASCII representation of this object.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSArray.Equals(Claunia.PropertyList.NSObject)">
            <summary>
            Determines whether the specified <see cref="T:Claunia.PropertyList.NSObject" /> is equal to the current <see cref="T:Claunia.PropertyList.NSArray" />.
            </summary>
            <param name="obj">The <see cref="T:Claunia.PropertyList.NSObject" /> to compare with the current <see cref="T:Claunia.PropertyList.NSArray" />.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:Claunia.PropertyList.NSObject" /> is equal to the current
            <see cref="T:Claunia.PropertyList.NSArray" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Claunia.PropertyList.NSData">
            <summary>
            NSData objects are wrappers for byte buffers
            </summary>
            @author Daniel Dreibrodt
            @author Natalia Portillo</member>
        <member name="M:Claunia.PropertyList.NSData.#ctor(System.Byte[])">
            <summary>
            Creates the NSData object from the binary representation of it.
            </summary>
            <param name="bytes">The raw data contained in the NSData object.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSData.#ctor(System.String)">
            <summary>
            Creates a NSData object from its textual representation, which is a Base64 encoded amount of bytes.
            </summary>
            <param name="base64">The Base64 encoded contents of the NSData object.</param>
            <exception cref="T:System.FormatException">When the given string is not a proper Base64 formatted string.</exception>
        </member>
        <member name="M:Claunia.PropertyList.NSData.#ctor(System.IO.FileInfo)">
            <summary>
            Creates a NSData object from a file. Using the files contents as the contents of this NSData object.
            </summary>
            <param name="file">The file containing the data.</param>
            <exception cref="T:System.IO.FileNotFoundException">If the file could not be found.</exception>
            <exception cref="T:System.IO.IOException">If the file could not be read.</exception>
        </member>
        <member name="P:Claunia.PropertyList.NSData.Bytes">
            <summary>
            The bytes contained in this NSData object.
            </summary>
            <value>The data as bytes</value>
        </member>
        <member name="P:Claunia.PropertyList.NSData.Length">
            <summary>
            Gets the amount of data stored in this object.
            </summary>
            <value>The number of bytes contained in this object.</value>
        </member>
        <member name="M:Claunia.PropertyList.NSData.GetBytes(System.IO.MemoryStream,System.Int32)">
            <summary>
            Loads the bytes from this NSData object into a byte buffer.
            </summary>
            <param name="buf">The byte buffer which will contain the data</param>
            <param name="length">The amount of data to copy</param>
        </member>
        <member name="M:Claunia.PropertyList.NSData.GetBytes(System.IO.MemoryStream,System.Int32,System.Int32)">
            <summary>
            Loads the bytes from this NSData object into a byte buffer.
            </summary>
            <param name="buf">The byte buffer which will contain the data</param>
            <param name="rangeStart">The start index.</param>
            <param name="rangeStop">The stop index.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSData.GetBase64EncodedData">
            <summary>
            Gets the Base64 encoded data contained in this NSData object.
            </summary>
            <returns>The Base64 encoded data as a <c>string</c>.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSData.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Claunia.PropertyList.NSData" />.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:Claunia.PropertyList.NSData" />.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to the current
            <see cref="T:Claunia.PropertyList.NSData" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSData.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Claunia.PropertyList.NSData" /> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a
            hash table.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSData.Equals(Claunia.PropertyList.NSObject)">
            <summary>
            Determines whether the specified <see cref="T:Claunia.PropertyList.NSObject" /> is equal to the current <see cref="T:Claunia.PropertyList.NSData" />.
            </summary>
            <param name="obj">The <see cref="T:Claunia.PropertyList.NSObject" /> to compare with the current <see cref="T:Claunia.PropertyList.NSData" />.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:Claunia.PropertyList.NSObject" /> is equal to the current
            <see cref="T:Claunia.PropertyList.NSData" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Claunia.PropertyList.NSDictionary">
            <summary>
                <para>
            A NSDictionary is a collection of keys and values, essentially a Dictionary.
            The keys are simple Strings whereas the values can be any kind of NSObject.
            </para>
                <para>
            You can access the keys through the function <see cref="P:Claunia.PropertyList.NSDictionary.Keys" />.
            </para>
                <para>
            Access to the objects stored for each key is given through the function
            <see cref="M:Claunia.PropertyList.NSDictionary.ObjectForKey(System.String)" />.
            </para>
            </summary>
            @author Daniel Dreibrodt
            @author Natalia Portillo</member>
        <member name="M:Claunia.PropertyList.NSDictionary.#ctor">
            <summary>
            Creates a new empty NSDictionary.
            </summary>
        </member>
        <member name="M:Claunia.PropertyList.NSDictionary.GetDictionary">
            <summary>
            Gets the hashmap which stores the keys and values of this dictionary.
            Changes to the hashmap's contents are directly reflected in this
            dictionary.
            </summary>
            <returns>The hashmap which is used by this dictionary to store its contents.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSDictionary.ObjectForKey(System.String)">
            <summary>
            Gets the NSObject stored for the given key.
            </summary>
            <returns>The object.</returns>
            <param name="key">The key.</param>
        </member>
        <member name="P:Claunia.PropertyList.NSDictionary.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
                <c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Claunia.PropertyList.NSDictionary.ContainsKey(System.Object)">
            <summary>
            Checks if the specified object key is contained in the current instance.
            </summary>
            <returns>
                <c>true</c>, if key is contained, <c>false</c> otherwise.</returns>
            <param name="key">Key.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSDictionary.Remove(System.Object)">
            <summary>
            Removes the item corresponding to the specified key from the current instance, if found.
            </summary>
            <param name="key">Key.</param>
            <returns>
                <c>true</c>, if  removed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSDictionary.Get(System.Object)">
            <summary>
            Gets the <see cref="T:Claunia.PropertyList.NSObject" /> corresponding to the specified key from the current instance.
            </summary>
            <param name="key">Key.</param>
            <returns>The object corresponding to the specified key, null if not found in the current instance.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSDictionary.ContainsValue(System.Object)">
            <summary>
            Checks if the current instance contains the object corresponding to the specified key.
            </summary>
            <returns>
                <c>true</c>, if value is contained, <c>false</c> otherwise.</returns>
            <param name="value">Object to search up in the current instance.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSDictionary.Add(System.String,System.Object)">
            <summary>
            Puts a new key-value pair into this dictionary.
            If the value is null, no operation will be performed on the dictionary.
            </summary>
            <param name="key">The key.</param>
            <param name="obj">The value. Supported object types are numbers, byte-arrays, dates, strings and arrays or sets of those.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSDictionary.Add(System.String,System.Int64)">
            <summary>
            Puts a new key-value pair into this dictionary.
            </summary>
            <param name="key">The key.</param>
            <param name="obj">The value.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSDictionary.Add(System.String,System.Double)">
            <summary>
            Puts a new key-value pair into this dictionary.
            </summary>
            <param name="key">The key.</param>
            <param name="obj">The value.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSDictionary.Add(System.String,System.Boolean)">
            <summary>
            Puts a new key-value pair into this dictionary.
            </summary>
            <param name="key">The key.</param>
            <param name="obj">The value.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSDictionary.ContainsValue(System.String)">
            <summary>
            Checks whether a given value is contained in this dictionary.
            </summary>
            <param name="val">The value that will be searched for.</param>
            <returns>Whether the key is contained in this dictionary.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSDictionary.ContainsValue(System.Int64)">
            <summary>
            Checks whether a given value is contained in this dictionary.
            </summary>
            <param name="val">The value that will be searched for.</param>
            <returns>Whether the key is contained in this dictionary.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSDictionary.ContainsValue(System.Double)">
            <summary>
            Checks whether a given value is contained in this dictionary.
            </summary>
            <param name="val">The value that will be searched for.</param>
            <returns>Whether the key is contained in this dictionary.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSDictionary.ContainsValue(System.Boolean)">
            <summary>
            Checks whether a given value is contained in this dictionary.
            </summary>
            <param name="val">The value that will be searched for.</param>
            <returns>Whether the key is contained in this dictionary.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSDictionary.ContainsValue(System.DateTime)">
            <summary>
            Checks whether a given value is contained in this dictionary.
            </summary>
            <param name="val">The value that will be searched for.</param>
            <returns>Whether the key is contained in this dictionary.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSDictionary.ContainsValue(System.Byte[])">
            <summary>
            Checks whether a given value is contained in this dictionary.
            </summary>
            <param name="val">The value that will be searched for.</param>
            <returns>Whether the key is contained in this dictionary.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSDictionary.Equals(Claunia.PropertyList.NSObject)">
            <summary>
            Determines whether the specified <see cref="T:Claunia.PropertyList.NSObject" /> is equal to the current <see cref="T:Claunia.PropertyList.NSDictionary" />.
            </summary>
            <param name="obj">The <see cref="T:Claunia.PropertyList.NSObject" /> to compare with the current <see cref="T:Claunia.PropertyList.NSDictionary" />.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:Claunia.PropertyList.NSObject" /> is equal to the current
            <see cref="T:Claunia.PropertyList.NSDictionary" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSDictionary.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Claunia.PropertyList.NSDictionary" /> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a
            hash table.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSDictionary.ToASCIIPropertyList">
            <summary>
            Generates a valid ASCII property list which has this NSDictionary as its
            root object. The generated property list complies with the format as
            described in https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/PropertyLists/OldStylePlists/OldStylePLists.html
            Property List Programming Guide - Old-Style ASCII Property Lists.
            </summary>
            <returns>ASCII representation of this object.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSDictionary.ToGnuStepASCIIPropertyList">
            <summary>
            Generates a valid ASCII property list in GnuStep format which has this
            NSDictionary as its root object. The generated property list complies with
            the format as described in http://www.gnustep.org/resources/documentation/Developer/Base/Reference/NSPropertyList.html
            GnuStep - NSPropertyListSerialization class documentation.
            </summary>
            <returns>GnuStep ASCII representation of this object.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSDictionary.Add(System.String,Claunia.PropertyList.NSObject)">
            <summary>
            Add the specified key and value.
            </summary>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSDictionary.ContainsKey(System.String)">
            <summary>
            Checks if there is any item contained in the current instance corresponding with the specified key.
            </summary>
            <returns>
                <c>true</c>, if key was contained, <c>false</c> otherwise.</returns>
            <param name="key">Key.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSDictionary.ContainsValue(Claunia.PropertyList.NSObject)">
            <summary>
            Checks if there is any item contained in the current instance corresponding with the specified value.
            </summary>
            <returns>
                <c>true</c>, if value is contained, <c>false</c> otherwise.</returns>
            <param name="value">Key.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSDictionary.Remove(System.String)">
            <summary>
            Removes the item belonging to the specified key.
            </summary>
            <param name="key">Key.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSDictionary.TryGetValue(System.String,Claunia.PropertyList.NSObject@)">
            <summary>
            Tries to get the item corresponding to the specified key
            </summary>
            <returns>
                <c>true</c>, if get value was successfully found and retrieved, <c>false</c> otherwise.</returns>
            <param name="key">Key.</param>
            <param name="value">Where to store the value.</param>
        </member>
        <member name="P:Claunia.PropertyList.NSDictionary.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:Claunia.PropertyList.NSObject" /> at the specified index.
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="P:Claunia.PropertyList.NSDictionary.Keys">
            <summary>
            Gets an array with all the keys contained in the current instance.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:Claunia.PropertyList.NSDictionary.Values">
            <summary>
            Gets an array with all the objects contained in the current instance.
            </summary>
            <value>The objects.</value>
        </member>
        <member name="M:Claunia.PropertyList.NSDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,Claunia.PropertyList.NSObject})">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSDictionary.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Claunia.PropertyList.NSDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,Claunia.PropertyList.NSObject})">
            <summary>
            Checks if the current instance contains the specified item.
            </summary>
            <param name="item">Item.</param>
            <returns>
                <c>true</c> if it is found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Claunia.PropertyList.NSDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,Claunia.PropertyList.NSObject}[],System.Int32)">
            <summary>
            Copies the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> elements to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Claunia.PropertyList.NSDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,Claunia.PropertyList.NSObject})">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">Item to remove.</param>
            <returns>
                <c>true</c> if successfully removed, <c>false</c> if not, or if item is not in current instance.</returns>
        </member>
        <member name="P:Claunia.PropertyList.NSDictionary.Count">
            <summary>
            Gets the count of items in the current instance.
            </summary>
            <value>How many items are contained in the current instance.</value>
        </member>
        <member name="P:Claunia.PropertyList.NSDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
                <c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Claunia.PropertyList.NSDictionary.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:Claunia.PropertyList.PropertyListFormatException">
            <summary>
            A PropertyListFormatException is thrown by the various property list format parsers
            when an error in the format of the given property list is encountered.
            </summary>
            @author Daniel Dreibrodt
            @author Natalia Portillo</member>
        <member name="M:Claunia.PropertyList.PropertyListFormatException.#ctor(System.String)">
            <summary>
            Creates a new exception with the given message.
            </summary>
            <param name="message">A message containing information about the nature of the exception.</param>
        </member>
        <member name="T:Claunia.PropertyList.PropertyListParser">
            <summary>
            This class provides methods to parse property lists. It can handle files,
            input streams and byte arrays. All known property list formats are supported.
            This class also provides methods to save and convert property lists.
            </summary>
            @author Daniel Dreibrodt
            @author Natalia Portillo</member>
        <member name="M:Claunia.PropertyList.PropertyListParser.DetermineType(System.String)">
            <summary>
            Determines the type of a property list by means of the first bytes of its data
            </summary>
            <returns>The type of the property list</returns>
            <param name="dataBeginning">The very first bytes of data of the property list (minus any whitespace) as a string</param>
        </member>
        <member name="M:Claunia.PropertyList.PropertyListParser.DetermineType(System.Byte[])">
            <summary>
            Determines the type of a property list by means of the first bytes of its data
            </summary>
            <returns>The very first bytes of data of the property list (minus any whitespace)</returns>
            <param name="bytes">The type of the property list</param>
        </member>
        <member name="M:Claunia.PropertyList.PropertyListParser.DetermineType(System.IO.Stream)">
            <summary>
            Determines the type of a property list by means of the first bytes of its data
            </summary>
            <returns>The type of the property list</returns>
            <param name="fs">An input stream pointing to the beginning of the property list data.
            The stream will be reset to the beginning of the property
            list data after the type has been determined.</param>
        </member>
        <member name="M:Claunia.PropertyList.PropertyListParser.ReadAll(System.IO.Stream)">
            <summary>
            Reads all bytes from an Stream and stores them in an array, up to
            a maximum count.
            </summary>
            <param name="fs">The Stream pointing to the data that should be stored in the array.</param>
        </member>
        <member name="M:Claunia.PropertyList.PropertyListParser.Parse(System.String)">
            <summary>
            Parses a property list from a file.
            </summary>
            <param name="filePath">Path to the property list file.</param>
            <returns>The root object in the property list. This is usually a NSDictionary but can also be a NSArray.</returns>
        </member>
        <member name="M:Claunia.PropertyList.PropertyListParser.Parse(System.IO.FileInfo)">
            <summary>
            Parses a property list from a file.
            </summary>
            <param name="f">The property list file.</param>
            <returns>The root object in the property list. This is usually a NSDictionary but can also be a NSArray.</returns>
        </member>
        <member name="M:Claunia.PropertyList.PropertyListParser.Parse(System.Byte[])">
            <summary>
            Parses a property list from a byte array.
            </summary>
            <param name="bytes">The property list data as a byte array.</param>
            <returns>The root object in the property list. This is usually a NSDictionary but can also be a NSArray.</returns>
        </member>
        <member name="M:Claunia.PropertyList.PropertyListParser.Parse(System.IO.Stream)">
            <summary>
            Parses a property list from an Stream.
            </summary>
            <param name="fs">The Stream delivering the property list data.</param>
            <returns>The root object of the property list. This is usually a NSDictionary but can also be a NSArray.</returns>
        </member>
        <member name="M:Claunia.PropertyList.PropertyListParser.SaveAsXml(Claunia.PropertyList.NSObject,System.IO.FileInfo)">
            <summary>
            Saves a property list with the given object as root into a XML file.
            </summary>
            <param name="root">The root object.</param>
            <param name="outFile">The output file.</param>
            <exception cref="T:System.IO.IOException">When an error occurs during the writing process.</exception>
        </member>
        <member name="M:Claunia.PropertyList.PropertyListParser.SaveAsXml(Claunia.PropertyList.NSObject,System.IO.Stream)">
            <summary>
            Saves a property list with the given object as root in XML format into an output stream.
            </summary>
            <param name="root">The root object.</param>
            <param name="outStream">The output stream.</param>
            <exception cref="T:System.IO.IOException">When an error occurs during the writing process.</exception>
        </member>
        <member name="M:Claunia.PropertyList.PropertyListParser.ConvertToXml(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Converts a given property list file into the OS X and iOS XML format.
            </summary>
            <param name="inFile">The source file.</param>
            <param name="outFile">The target file.</param>
        </member>
        <member name="M:Claunia.PropertyList.PropertyListParser.SaveAsBinary(Claunia.PropertyList.NSObject,System.IO.FileInfo)">
            <summary>
            Saves a property list with the given object as root into a binary file.
            </summary>
            <param name="root">The root object.</param>
            <param name="outFile">The output file.</param>
            <exception cref="T:System.IO.IOException">When an error occurs during the writing process.</exception>
        </member>
        <member name="M:Claunia.PropertyList.PropertyListParser.SaveAsBinary(Claunia.PropertyList.NSObject,System.IO.Stream)">
            <summary>
            Saves a property list with the given object as root in binary format into an output stream.
            </summary>
            <param name="root">The root object.</param>
            <param name="outStream">The output stream.</param>
            <exception cref="T:System.IO.IOException">When an error occurs during the writing process.</exception>
        </member>
        <member name="M:Claunia.PropertyList.PropertyListParser.ConvertToBinary(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Converts a given property list file into the OS X and iOS binary format.
            </summary>
            <param name="inFile">The source file.</param>
            <param name="outFile">The target file.</param>
        </member>
        <member name="M:Claunia.PropertyList.PropertyListParser.SaveAsASCII(Claunia.PropertyList.NSDictionary,System.IO.FileInfo)">
            <summary>
            Saves a property list with the given object as root into a ASCII file.
            </summary>
            <param name="root">The root object.</param>
            <param name="outFile">The output file.</param>
            <exception cref="T:System.IO.IOException">When an error occurs during the writing process.</exception>
        </member>
        <member name="M:Claunia.PropertyList.PropertyListParser.SaveAsASCII(Claunia.PropertyList.NSArray,System.IO.FileInfo)">
            <summary>
            Saves a property list with the given object as root into a ASCII file.
            </summary>
            <param name="root">The root object.</param>
            <param name="outFile">The output file.</param>
            <exception cref="T:System.IO.IOException">When an error occurs during the writing process.</exception>
        </member>
        <member name="M:Claunia.PropertyList.PropertyListParser.ConvertToASCII(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Converts a given property list file into ASCII format.
            </summary>
            <param name="inFile">The source file.</param>
            <param name="outFile">The target file.</param>
        </member>
        <member name="M:Claunia.PropertyList.PropertyListParser.SaveAsGnuStepASCII(Claunia.PropertyList.NSDictionary,System.IO.FileInfo)">
            <summary>
            Saves a property list with the given object as root into a GnuStep ASCII file.
            </summary>
            <param name="root">The root object.</param>
            <param name="outFile">The output file.</param>
            <exception cref="T:System.IO.IOException">When an error occurs during the writing process.</exception>
        </member>
        <member name="M:Claunia.PropertyList.PropertyListParser.SaveAsGnuStepASCII(Claunia.PropertyList.NSArray,System.IO.FileInfo)">
            <summary>
            Saves a property list with the given object as root into a GnuStep ASCII file.
            </summary>
            <param name="root">The root object.</param>
            <param name="outFile">The output file.</param>
            <exception cref="T:System.IO.IOException">When an error occurs during the writing process.</exception>
        </member>
        <member name="M:Claunia.PropertyList.PropertyListParser.ConvertToGnuStepASCII(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Converts a given property list file into GnuStep ASCII format.
            </summary>
            <param name="inFile">The source file.</param>
            <param name="outFile">The target file.</param>
        </member>
        <member name="T:Claunia.PropertyList.ASCIIPropertyListParser">
            <summary>
                <para>
            Parser for ASCII property lists. Supports Apple OS X/iOS and GnuStep/NeXTSTEP format.
            This parser is based on the recursive descent paradigm, but the underlying grammar
            is not explicitely defined.
            </para>
                <para>
            Resources on ASCII property list format:
            </para>
                <para>
            https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/PropertyLists/OldStylePlists/OldStylePLists.html
            </para>
                <para>
            Property List Programming Guide - Old-Style ASCII Property Lists
            </para>
                <para>
            http://www.gnustep.org/resources/documentation/Developer/Base/Reference/NSPropertyList.html
            </para>
                <para>
            GnuStep - NSPropertyListSerialization class documentation
            </para>
            </summary>
            @author Daniel Dreibrodt
            @author Natalia Portillo</member>
        <member name="M:Claunia.PropertyList.ASCIIPropertyListParser.Parse(System.IO.FileInfo)">
            <summary>
            Parses an ASCII property list file.
            </summary>
            <param name="f">The ASCII property list file..</param>
            <returns>The root object of the property list. This is usually a NSDictionary but can also be a NSArray.</returns>
            <exception cref="T:System.FormatException">When an error occurs during parsing.</exception>
            <exception cref="T:System.IO.IOException">When an error occured while reading from the input stream.</exception>
        </member>
        <member name="M:Claunia.PropertyList.ASCIIPropertyListParser.Parse(System.IO.Stream)">
            <summary>
            Parses an ASCII property list from an input stream.
            </summary>
            <param name="fs">The input stream that points to the property list's data.</param>
            <returns>The root object of the property list. This is usually a NSDictionary but can also be a NSArray.</returns>
            <exception cref="T:System.FormatException">When an error occurs during parsing.</exception>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="M:Claunia.PropertyList.ASCIIPropertyListParser.Parse(System.Byte[])">
            <summary>
            Parses an ASCII property list from a byte array.
            </summary>
            <param name="bytes">The ASCII property list data.</param>
            <returns>The root object of the property list. This is usually a NSDictionary but can also be a NSArray.</returns>
            <exception cref="T:System.FormatException">When an error occurs during parsing.</exception>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.WHITESPACE_SPACE">
            <summary>
            A space
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.WHITESPACE_TAB">
            <summary>
            A tabulator
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.WHITESPACE_NEWLINE">
            <summary>
            A newline
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.WHITESPACE_CARRIAGE_RETURN">
            <summary>
            A carriage return
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.ARRAY_BEGIN_TOKEN">
            <summary>
            Token of NSArray start
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.ARRAY_END_TOKEN">
            <summary>
            Token of NSArray end
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.ARRAY_ITEM_DELIMITER_TOKEN">
            <summary>
            Token of NSArray item delimiter
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.DICTIONARY_BEGIN_TOKEN">
            <summary>
            Token of NSDictionary start
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.DICTIONARY_END_TOKEN">
            <summary>
            Token of NSDictionary end
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.DICTIONARY_ASSIGN_TOKEN">
            <summary>
            Token of NSDictionary assignment
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.DICTIONARY_ITEM_DELIMITER_TOKEN">
            <summary>
            Token of NSDictionary item delimiter
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.QUOTEDSTRING_BEGIN_TOKEN">
            <summary>
            Token of quoted NSString start
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.QUOTEDSTRING_END_TOKEN">
            <summary>
            Token of quoted NSString end
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.QUOTEDSTRING_ESCAPE_TOKEN">
            <summary>
            Token of quoted NSString escaped character
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.DATA_BEGIN_TOKEN">
            <summary>
            Token of NSData start
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.DATA_END_TOKEN">
            <summary>
            Token of NSData end
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.DATA_GSOBJECT_BEGIN_TOKEN">
            <summary>
            Token of GSObject start
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.DATA_GSDATE_BEGIN_TOKEN">
            <summary>
            Token of GSDate start
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.DATA_GSBOOL_BEGIN_TOKEN">
            <summary>
            Token of GSBoolean start
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.DATA_GSBOOL_TRUE_TOKEN">
            <summary>
            Token for GSBoolen's <c>true</c></summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.DATA_GSBOOL_FALSE_TOKEN">
            <summary>
            Token for GSBoolen's <c>false</c></summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.DATA_GSINT_BEGIN_TOKEN">
            <summary>
            Token for GSInteger
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.DATA_GSREAL_BEGIN_TOKEN">
            <summary>
            Token for GSReal
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.DATE_DATE_FIELD_DELIMITER">
            <summary>
            Token for NSDate date field delimited
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.DATE_TIME_FIELD_DELIMITER">
            <summary>
            Token for NSDate time field delimiter
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.DATE_GS_DATE_TIME_DELIMITER">
            <summary>
            Token for GSDate date and time delimiter
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.DATE_APPLE_DATE_TIME_DELIMITER">
            <summary>
            Token for NSDate date and time delimiter
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.DATE_APPLE_END_TOKEN">
            <summary>
            Token for NSDate end
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.COMMENT_BEGIN_TOKEN">
            <summary>
            Token for comment start
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.MULTILINE_COMMENT_SECOND_TOKEN">
            <summary>
            Second token for multiline comment
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.SINGLELINE_COMMENT_SECOND_TOKEN">
            <summary>
            Second token for singleline comment
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.MULTILINE_COMMENT_END_TOKEN">
            <summary>
            End token for multiline comment
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.data">
                    * Property list source data</member>
        <member name="F:Claunia.PropertyList.ASCIIPropertyListParser.index">
                    * Current parsing index</member>
        <member name="M:Claunia.PropertyList.ASCIIPropertyListParser.#ctor">
                    * Only allow subclasses to change instantiation.</member>
        <member name="M:Claunia.PropertyList.ASCIIPropertyListParser.#ctor(System.Byte[])">
            <summary>
            Creates a new parser for the given property list content.
            </summary>
            <param name="propertyListContent">The content of the property list that is to be parsed.</param>
        </member>
        <member name="M:Claunia.PropertyList.ASCIIPropertyListParser.AcceptSequence(System.Char[])">
            <summary>
            Checks whether the given sequence of symbols can be accepted.
            </summary>
            <returns>Whether the given tokens occur at the current parsing position.</returns>
            <param name="sequence">The sequence of tokens to look for.</param>
        </member>
        <member name="M:Claunia.PropertyList.ASCIIPropertyListParser.Accept(System.Char[])">
            <summary>
            Checks whether the given symbols can be accepted, that is, if one
            of the given symbols is found at the current parsing position.
            </summary>
            <param name="acceptableSymbols">The symbols to check.</param>
            <returns>Whether one of the symbols can be accepted or not.</returns>
        </member>
        <member name="M:Claunia.PropertyList.ASCIIPropertyListParser.Accept(System.Char)">
            <summary>
            Checks whether the given symbol can be accepted, that is, if
            the given symbols is found at the current parsing position.
            </summary>
            <param name="acceptableSymbol">The symbol to check.</param>
            <returns>Whether the symbol can be accepted or not.</returns>
        </member>
        <member name="M:Claunia.PropertyList.ASCIIPropertyListParser.Expect(System.Char[])">
            <summary>
            Expects the input to have one of the given symbols at the current parsing position.
            </summary>
            <param name="expectedSymbols">The expected symbols.</param>
            <exception cref="T:System.FormatException">If none of the expected symbols could be found.</exception>
        </member>
        <member name="M:Claunia.PropertyList.ASCIIPropertyListParser.Expect(System.Char)">
            <summary>
            Expects the input to have the given symbol at the current parsing position.
            </summary>
            <param name="expectedSymbol">The expected symbol.</param>
            <exception cref="T:System.FormatException">If the expected symbol could be found.</exception>
        </member>
        <member name="M:Claunia.PropertyList.ASCIIPropertyListParser.Read(System.Char)">
            <summary>
            Reads an expected symbol.
            </summary>
            <param name="symbol">The symbol to read.</param>
            <exception cref="T:System.FormatException">If the expected symbol could not be read.</exception>
        </member>
        <member name="M:Claunia.PropertyList.ASCIIPropertyListParser.Skip">
                 * Skips the current symbol.</member>
        <member name="M:Claunia.PropertyList.ASCIIPropertyListParser.Skip(System.Int32)">
            <summary>
            Skips several symbols
            </summary>
            <param name="numSymbols">The amount of symbols to skip.</param>
        </member>
        <member name="M:Claunia.PropertyList.ASCIIPropertyListParser.SkipWhitespacesAndComments">
                 * Skips all whitespaces and comments from the current parsing position onward.</member>
        <member name="M:Claunia.PropertyList.ASCIIPropertyListParser.ReadInputUntil(System.Char[])">
            <summary>
            Reads input until one of the given symbols is found.
            </summary>
            <returns>The input until one the given symbols.</returns>
            <param name="symbols">The symbols that can occur after the string to read.</param>
        </member>
        <member name="M:Claunia.PropertyList.ASCIIPropertyListParser.ReadInputUntil(System.Char)">
            <summary>
            Reads input until the given symbol is found.
            </summary>
            <returns>The input until the given symbol.</returns>
            <param name="symbol">The symbol that can occur after the string to read.</param>
        </member>
        <member name="M:Claunia.PropertyList.ASCIIPropertyListParser.Parse">
            <summary>
            Parses the property list from the beginning and returns the root object
            of the property list.
            </summary>
            <returns>The root object of the property list. This can either be a NSDictionary or a NSArray.</returns>
            <exception cref="T:System.FormatException">When an error occured during parsing</exception>
        </member>
        <member name="M:Claunia.PropertyList.ASCIIPropertyListParser.ParseObject">
            <summary>
            Parses the NSObject found at the current position in the property list
            data stream.
            </summary>
            <returns>The parsed NSObject.</returns>
            <seealso cref="F:Claunia.PropertyList.ASCIIPropertyListParser.index" />
        </member>
        <member name="M:Claunia.PropertyList.ASCIIPropertyListParser.ParseArray">
            <summary>
            Parses an array from the current parsing position.
            The prerequisite for calling this method is, that an array begin token has been read.
            </summary>
            <returns>The array found at the parsing position.</returns>
        </member>
        <member name="M:Claunia.PropertyList.ASCIIPropertyListParser.ParseDictionary">
            <summary>
            Parses a dictionary from the current parsing position.
            The prerequisite for calling this method is, that a dictionary begin token has been read.
            </summary>
            <returns>The dictionary found at the parsing position.</returns>
        </member>
        <member name="M:Claunia.PropertyList.ASCIIPropertyListParser.ParseData">
            <summary>
            Parses a data object from the current parsing position.
            This can either be a NSData object or a GnuStep NSNumber or NSDate.
            The prerequisite for calling this method is, that a data begin token has been read.
            </summary>
            <returns>The data object found at the parsing position.</returns>
        </member>
        <member name="M:Claunia.PropertyList.ASCIIPropertyListParser.ParseDateString">
            <summary>
            Attempts to parse a plain string as a date if possible.
            </summary>
            <returns>A NSDate if the string represents such an object. Otherwise a NSString is returned.</returns>
        </member>
        <member name="M:Claunia.PropertyList.ASCIIPropertyListParser.ParseString">
            <summary>
            Parses a plain string from the current parsing position.
            The string is made up of all characters to the next whitespace, delimiter token or assignment token.
            </summary>
            <returns>The string found at the current parsing position.</returns>
        </member>
        <member name="M:Claunia.PropertyList.ASCIIPropertyListParser.ParseQuotedString">
            <summary>
            Parses a quoted string from the current parsing position.
            The prerequisite for calling this method is, that a quoted string begin token has been read.
            </summary>
            <returns>The quoted string found at the parsing method with all special characters unescaped.</returns>
            <exception cref="T:System.FormatException">If an error occured during parsing.</exception>
        </member>
        <member name="M:Claunia.PropertyList.ASCIIPropertyListParser.ParseQuotedString(System.String)">
            <summary>
            Parses a string according to the format specified for ASCII property lists.
            Such strings can contain escape sequences which are unescaped in this method.
            </summary>
            <returns>The unescaped string in UTF-8 or ASCII format, depending on the contained characters.</returns>
            <param name="s">The escaped string according to the ASCII property list format, without leading and trailing quotation marks.</param>
            <exception cref="T:System.ArgumentException">If the en-/decoder for the UTF-8 or ASCII encoding could not be loaded</exception>
            <exception cref="T:System.Text.EncoderFallbackException">If the string is encoded neither in ASCII nor in UTF-8</exception>
        </member>
        <member name="M:Claunia.PropertyList.ASCIIPropertyListParser.ParseEscapedSequence(System.CharEnumerator)">
            <summary>
            Unescapes an escaped character sequence, e.g. \\u00FC.
            </summary>
            <returns>The unescaped character as a string.</returns>
            <param name="iterator">The string character iterator pointing to the first character after the backslash</param>
            <exception cref="T:System.Text.EncoderFallbackException">If an invalid Unicode or ASCII escape sequence is found.</exception>
        </member>
        <member name="T:Claunia.PropertyList.BinaryPropertyListParser">
            <summary>
                <para>
            Parses property lists that are in Apple's binary format.
            Use this class when you are sure about the format of the property list.
            Otherwise use the PropertyListParser class.
            </para>
                <para>
            Parsing is done by calling the static <see cref="M:Claunia.PropertyList.BinaryPropertyListParser.Parse(System.Byte[])" />,
            <see cref="M:Claunia.PropertyList.BinaryPropertyListParser.Parse(System.IO.FileInfo)" /> and <see cref="M:Claunia.PropertyList.BinaryPropertyListParser.Parse(System.IO.Stream)" /> methods.
            </para>
            </summary>
            @author Daniel Dreibrodt
            @author Natalia Portillo</member>
        <member name="F:Claunia.PropertyList.BinaryPropertyListParser.majorVersion">
            <summary>
            Major version of the property list format
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.BinaryPropertyListParser.minorVersion">
            <summary>
            Minor version of the property list format
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.BinaryPropertyListParser.bytes">
            <summary>
            Property list in bytes
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.BinaryPropertyListParser.objectRefSize">
            <summary>
            Length of an object reference in bytes
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.BinaryPropertyListParser.offsetTable">
            <summary>
            The table holding the information at which offset each object is found
            </summary>
        </member>
        <member name="M:Claunia.PropertyList.BinaryPropertyListParser.#ctor">
            <summary>
            Protected constructor so that instantiation is fully controlled by the
            static parse methods.
            </summary>
            <see cref="M:Claunia.PropertyList.BinaryPropertyListParser.Parse(System.Byte[])" />
        </member>
        <member name="M:Claunia.PropertyList.BinaryPropertyListParser.Parse(System.Byte[])">
            <summary>
            Parses a binary property list from a byte array.
            </summary>
            <param name="data">The binary property list's data.</param>
            <returns>The root object of the property list. This is usually a NSDictionary but can also be a NSArray.</returns>
            <exception cref="T:Claunia.PropertyList.PropertyListFormatException">When the property list's format could not be parsed.</exception>
        </member>
        <member name="M:Claunia.PropertyList.BinaryPropertyListParser.DoParse(System.Byte[])">
            <summary>
            Parses a binary property list from a byte array.
            </summary>
            <returns>The root object of the property list. This is usually a NSDictionary but can also be a NSArray.</returns>
            <param name="data">The binary property list's data.</param>
            <exception cref="T:Claunia.PropertyList.PropertyListFormatException">When the property list's format could not be parsed.</exception>
        </member>
        <member name="M:Claunia.PropertyList.BinaryPropertyListParser.Parse(System.IO.Stream)">
            <summary>
            Parses a binary property list from an input stream.
            </summary>
            <param name="fs">The input stream that points to the property list's data.</param>
            <returns>The root object of the property list. This is usually a NSDictionary but can also be a NSArray.</returns>
            <exception cref="T:Claunia.PropertyList.PropertyListFormatException">When the property list's format could not be parsed.</exception>
        </member>
        <member name="M:Claunia.PropertyList.BinaryPropertyListParser.Parse(System.IO.FileInfo)">
            <summary>
            Parses a binary property list file.
            </summary>
            <param name="f">The binary property list file</param>
            <returns>The root object of the property list. This is usually a NSDictionary but can also be a NSArray.</returns>
            <exception cref="T:Claunia.PropertyList.PropertyListFormatException">When the property list's format could not be parsed.</exception>
        </member>
        <member name="M:Claunia.PropertyList.BinaryPropertyListParser.ParseObject(System.Int32)">
            <summary>
            Parses an object inside the currently parsed binary property list.
            For the format specification check
            <a href="http://www.opensource.apple.com/source/CF/CF-855.17/CFBinaryPList.c">
            Apple's binary property list parser implementation</a>.
            </summary>
            <returns>The parsed object.</returns>
            <param name="obj">The object ID.</param>
            <exception cref="T:Claunia.PropertyList.PropertyListFormatException">When the property list's format could not be parsed.</exception>
        </member>
        <member name="M:Claunia.PropertyList.BinaryPropertyListParser.ReadLengthAndOffset(System.Int32,System.Int32)">
            <summary>
            Reads the length for arrays, sets and dictionaries.
            </summary>
            <returns>An array with the length two. First entry is the length, second entry the offset at which the content starts.</returns>
            <param name="objInfo">Object information byte.</param>
            <param name="offset">Offset in the byte array at which the object is located.</param>
        </member>
        <member name="M:Claunia.PropertyList.BinaryPropertyListParser.CalculateUtf8StringLength(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calculates the length in bytes of the UTF-8 string.
            </summary>
            <returns>The UTF-8 string length.</returns>
            <param name="bytes">Array containing the UTF-8 string.</param>
            <param name="offset">Offset in the array where the UTF-8 string resides.</param>
            <param name="numCharacters">How many UTF-8 characters are in the string.</param>
        </member>
        <member name="M:Claunia.PropertyList.BinaryPropertyListParser.ParseUnsignedInt(System.Byte[])">
            <summary>
            Parses an unsigned integers from a byte array.
            </summary>
            <returns>The byte array containing the unsigned integer.</returns>
            <param name="bytes">The unsigned integer represented by the given bytes.</param>
        </member>
        <member name="M:Claunia.PropertyList.BinaryPropertyListParser.ParseUnsignedInt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses an unsigned integer from a byte array.
            </summary>
            <returns>The unsigned integer represented by the given bytes.</returns>
            <param name="bytes">The byte array containing the unsigned integer.</param>
            <param name="startIndex">Beginning of the unsigned int in the byte array.</param>
            <param name="endIndex">End of the unsigned int in the byte array.</param>
        </member>
        <member name="M:Claunia.PropertyList.BinaryPropertyListParser.ParseLong(System.Byte[])">
            <summary>
            Parses a long from a (big-endian) byte array.
            </summary>
            <returns>The long integer represented by the given bytes.</returns>
            <param name="bytes">The bytes representing the long integer.</param>
        </member>
        <member name="M:Claunia.PropertyList.BinaryPropertyListParser.ParseLong(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses a long from a (big-endian) byte array.
            </summary>
            <returns>The long integer represented by the given bytes.</returns>
            <param name="bytes">The bytes representing the long integer.</param>
            <param name="startIndex">Beginning of the long in the byte array.</param>
            <param name="endIndex">End of the long in the byte array.</param>
        </member>
        <member name="M:Claunia.PropertyList.BinaryPropertyListParser.ParseDouble(System.Byte[])">
            <summary>
            Parses a double from a (big-endian) byte array.
            </summary>
            <returns>The double represented by the given bytes.</returns>
            <param name="bytes">The bytes representing the double.</param>
        </member>
        <member name="M:Claunia.PropertyList.BinaryPropertyListParser.ParseDouble(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses a double from a (big-endian) byte array.
            </summary>
            <returns>The double represented by the given bytes.</returns>
            <param name="bytes">The bytes representing the double.</param>
            <param name="startIndex">Beginning of the double in the byte array.</param>
            <param name="endIndex">End of the double in the byte array.</param>
        </member>
        <member name="M:Claunia.PropertyList.BinaryPropertyListParser.CopyOfRange(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies a part of a byte array into a new array.
            </summary>
            <returns>The copied array.</returns>
            <param name="src">The source array.</param>
            <param name="startIndex">The index from which to start copying.</param>
            <param name="endIndex">The index until which to copy.</param>
        </member>
        <member name="T:Claunia.PropertyList.BinaryPropertyListWriter">
            <summary>
                <para>
            A BinaryPropertyListWriter is a helper class for writing out
            binary property list files.
            </para>
                <para>
            It contains an output stream and various structures for keeping track
            of which NSObjects have already been serialized, and where they were
            put in the file.
            </para>
            </summary>
            @author Keith Randall
            @author Natalia Portillo</member>
        <member name="F:Claunia.PropertyList.BinaryPropertyListWriter.VERSION_00">
            <summary>
            Binary property list version 0.0
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.BinaryPropertyListWriter.VERSION_10">
            <summary>
            Binary property list version 1.0
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.BinaryPropertyListWriter.VERSION_15">
            <summary>
            Binary property list version 1.5
            </summary>
        </member>
        <member name="F:Claunia.PropertyList.BinaryPropertyListWriter.VERSION_20">
            <summary>
            Binary property list version 2.0
            </summary>
        </member>
        <member name="M:Claunia.PropertyList.BinaryPropertyListWriter.GetMinimumRequiredVersion(Claunia.PropertyList.NSObject)">
            <summary>
            Finds out the minimum binary property list format version that
            can be used to save the given NSObject tree.
            </summary>
            <returns>Version code</returns>
            <param name="root">Object root.</param>
        </member>
        <member name="M:Claunia.PropertyList.BinaryPropertyListWriter.Write(System.IO.FileInfo,Claunia.PropertyList.NSObject)">
            <summary>
            Writes a binary plist file with the given object as the root.
            </summary>
            <param name="file">the file to write to</param>
            <param name="root">the source of the data to write to the file</param>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="M:Claunia.PropertyList.BinaryPropertyListWriter.Write(System.IO.Stream,Claunia.PropertyList.NSObject)">
            <summary>
            Writes a binary plist serialization of the given object as the root.
            </summary>
            <param name="outStream">the stream to write to</param>
            <param name="root">the source of the data to write to the stream</param>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="M:Claunia.PropertyList.BinaryPropertyListWriter.WriteToArray(Claunia.PropertyList.NSObject)">
            <summary>
            Writes a binary plist serialization of the given object as the root
            into a byte array.
            </summary>
            <returns>The byte array containing the serialized property list</returns>
            <param name="root">The root object of the property list</param>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="M:Claunia.PropertyList.BinaryPropertyListWriter.#ctor(System.IO.Stream)">
            <summary>
            Creates a new binary property list writer
            </summary>
            <param name="outStr">The output stream into which the binary property list will be written</param>
            <exception cref="T:System.IO.IOException">If an error occured while writing to the stream</exception>
        </member>
        <member name="T:Claunia.PropertyList.XmlPropertyListParser">
            <summary>
            Parses XML property lists.
            </summary>
            @author Daniel Dreibrodt
            @author Natalia Portillo</member>
        <member name="M:Claunia.PropertyList.XmlPropertyListParser.Parse(System.IO.FileInfo)">
            <summary>
            Parses a XML property list file.
            </summary>
            <param name="f">The XML property list file.</param>
            <returns>The root object of the property list. This is usually a NSDictionary but can also be a NSArray.</returns>
        </member>
        <member name="M:Claunia.PropertyList.XmlPropertyListParser.Parse(System.Byte[])">
            <summary>
            Parses a XML property list from a byte array.
            </summary>
            <param name="bytes">The byte array containing the property list's data.</param>
            <returns>The root object of the property list. This is usually a NSDictionary but can also be a NSArray.</returns>
        </member>
        <member name="M:Claunia.PropertyList.XmlPropertyListParser.Parse(System.IO.Stream)">
            <summary>
            Parses a XML property list from an input stream.
            </summary>
            <param name="str">The input stream pointing to the property list's data.</param>
            <returns>The root object of the property list. This is usually a NSDictionary but can also be a NSArray.</returns>
        </member>
        <member name="M:Claunia.PropertyList.XmlPropertyListParser.ParseDocument(System.Xml.XmlDocument)">
            <summary>
            Parses the XML document by generating the appropriate NSObjects for each XML node.
            </summary>
            <returns>The root NSObject of the property list contained in the XML document.</returns>
            <param name="doc">The XML document.</param>
        </member>
        <member name="M:Claunia.PropertyList.XmlPropertyListParser.ParseObject(System.Xml.XmlNode)">
            <summary>
            Parses a node in the XML structure and returns the corresponding NSObject
            </summary>
            <returns>The corresponding NSObject.</returns>
            <param name="n">The XML node.</param>
        </member>
        <member name="M:Claunia.PropertyList.XmlPropertyListParser.FilterElementNodes(System.Xml.XmlNodeList)">
            <summary>
            Returns all element nodes that are contained in a list of nodes.
            </summary>
            <returns>The sublist containing only nodes representing actual elements.</returns>
            <param name="list">The list of nodes to search.</param>
        </member>
        <member name="M:Claunia.PropertyList.XmlPropertyListParser.GetNodeTextContents(System.Xml.XmlNode)">
            <summary>
            Returns a node's text content.
            This method will return the text value represented by the node's direct children.
            If the given node is a TEXT or CDATA node, then its value is returned.
            </summary>
            <returns>The node's text content.</returns>
            <param name="n">The node.</param>
        </member>
    </members>
</doc>
